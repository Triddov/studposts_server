Index: app/routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, request\r\nfrom flask_jwt_extended import get_jwt_identity, JWTManager, jwt_required, decode_token\r\nfrom .database import *\r\nfrom .generate_captcha import *\r\nfrom .generate_token import *\r\nfrom .validation_data import *\r\nfrom .server_exception import Response\r\nfrom dotenv import load_dotenv\r\nfrom functools import wraps\r\nimport time\r\nimport os\r\n\r\n# обновить логику бана по ip - в таблицу user добавить флаг is_blocked\r\n# сделать дефолтную картинку\r\n\r\n\r\nload_dotenv()\r\n\r\nSECRET_KEY = os.getenv('JWT_SECRET_KEY')\r\nTIME_CAPTCHA_LIMIT = int(os.getenv('CAPTCHA_EXPIRATION_MINUTES')) * 60  # в секундах\r\nAUTHORIZATION_LIMIT = int(os.getenv('AUTHORIZATION_LIMIT')) * 60  # в секундах\r\n\r\nnginx_blacklist_path = 'nginx_blacklist.conf'  # путь из корня проекта к списку забаненных по ip\r\nnginx_banned_ips = load_nginx_blacklist(nginx_blacklist_path)\r\n\r\napi = Blueprint('api', __name__)  # добавляет api во всех раутах\r\n\r\njwt = JWTManager()  # объект генерации токенов\r\n\r\n\r\ndef token_required(f):  # метод проверки токенов авторизации\r\n    @wraps(f)\r\n    def decorator(*args, **kwargs):  # декоратор для проверки токена на каждом рауте\r\n        response = Response()\r\n\r\n        token = None\r\n        if 'Authorization' in request.headers:\r\n            token = request.headers['Authorization'].split()[1]\r\n        if not token:\r\n            response.status(405)\r\n            return response.send()\r\n\r\n        try:\r\n            identity = get_jwt_identity()  # получение токена авторизации\r\n            owner_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n            password = encrypt_decrypt(identity[\"password\"], SECRET_KEY)\r\n\r\n            user = User.find_by_login(owner_login)\r\n\r\n            # проверка логина и пароля пользователя\r\n            if not user or password != user['password']:\r\n                response.set_status(410)\r\n                return response.send()\r\n\r\n        # если ошибка декодирования\r\n        except:\r\n            response.set_status(406)\r\n            return response.send()\r\n\r\n        return f(*args, **kwargs)\r\n\r\n    return decorator\r\n\r\n\r\n@api.before_request\r\ndef check_ban_ip():\r\n    response = Response()\r\n\r\n    ip = request.remote_addr\r\n    if ip in nginx_banned_ips:\r\n        response.set_status(403)   # abort(403)\r\n        return response.send()\r\n\r\n\r\n@api.route('/captcha', methods=['GET'])  # метод генерации и получения капчи\r\ndef get_captcha():\r\n    response = Response()\r\n\r\n    # генерация капчи\r\n    captcha_text = generate_captcha()\r\n    encoded_captcha_solution = encrypt_decrypt(captcha_text, SECRET_KEY)\r\n    base64_image = generate_captcha_image(captcha_text)\r\n    print(\"Текст капчи: \" + captcha_text)\r\n    captcha_created_time = int(time.time())  # время, до которого капча валидна\r\n    token = create_access_token(identity={\"solution\": encoded_captcha_solution, \"created_time\": captcha_created_time})\r\n\r\n    response.set_data({\r\n        'captcha_image': base64_image,  # изображение капчи, закодированное в base64\r\n        'captcha_token': token  # закодированное решение капчи в виде jwt-токен\r\n    })\r\n    return response.send()\r\n\r\n\r\n@api.route('/auth', methods=['POST'])  # метод авторизации/регистрации пользователя\r\ndef auth():\r\n    response = Response()\r\n    try:\r\n        # получаем значение Target-Action в заголовке запроса\r\n        action = request.headers.get('Target-Action')\r\n\r\n        if action != \"REGISTER\" and action != \"LOGIN\":\r\n            response.set_status(415)\r\n            return response.send()\r\n\r\n        data = request.get_json()\r\n        input_captcha = data.get(\"input_captcha\")\r\n        captcha_solution_token = data.get(\"captcha_token\")\r\n\r\n        # проверка наличия полей решения капчи\r\n        if not captcha_solution_token or not input_captcha:\r\n            response.set_status(411)\r\n            return response.send()\r\n\r\n        # декодируем капчу и время, до которого она валидна\r\n        try:\r\n            decoded_captcha_token = decode_token(captcha_solution_token)\r\n            captcha_solution = encrypt_decrypt(decoded_captcha_token['sub']['solution'], SECRET_KEY)\r\n            captcha_created_time = decoded_captcha_token['sub']['created_time']\r\n\r\n        except:\r\n            response.set_status(413)\r\n            return response.send()\r\n\r\n        current_time = int(time.time())  # в секундах\r\n\r\n        # проверка актуального времени капчи\r\n        # if captcha_created_time + TIME_CAPTCHA_LIMIT < current_time:\r\n        #     response.set_status(416)\r\n        #     return response.send()\r\n\r\n        # проверка пользовательского решения капчи\r\n        if input_captcha != captcha_solution:\r\n            response.set_status(414)\r\n            return response.send()\r\n\r\n\r\n        # поля для обоих сценариев\r\n        login = data.get('login')\r\n        password = data.get('password')\r\n\r\n        user_data = {}\r\n\r\n        # логика регистрации\r\n        if action == 'REGISTER':\r\n            try:\r\n                # публичные поля (требуют проверки на badwords)\r\n                first_name = data.get('first_name')\r\n                middle_name = data.get('middle_name')\r\n                sur_name = data.get('sur_name')\r\n\r\n                # непубличные поля (не требуют проверки на badwords)\r\n                email = data.get('email')\r\n                phone_number = data.get('phone_number')\r\n                pers_photo_data = data.get('pers_photo_data')\r\n\r\n                # валидация всех полей\r\n                is_valid, validation_error = check_user_data(data)\r\n                if not is_valid:\r\n                    response.set_status(417)\r\n                    response.set_message(validation_error)\r\n                    return response.send()\r\n\r\n                # проверка на плохие слова\r\n                if not check_bad_words(first_name, middle_name, sur_name):\r\n                    response.set_status(418)\r\n                    return response.send()\r\n\r\n                if pers_photo_data is not None:\r\n                    header, pers_photo_data = pers_photo_data.split(\",\", 1)\r\n\r\n                    # проверка иконки на наличие, валидность и \"квадратность\"\r\n                    if not is_image_valid(pers_photo_data) or not is_icon_square(pers_photo_data):\r\n                        response.set_status(420)\r\n                        return response.send()\r\n\r\n                    # сохранение иконки и возврат ее пути для записи\r\n                    unique_filename = generate_uuid() + \".png\"\r\n                    pers_photo_data = save_icon(pers_photo_data, unique_filename)\r\n\r\n            # если данные некорректны\r\n            except Exception:\r\n                response.set_status(417)\r\n                return response.send()\r\n\r\n            # проверка и запись пользователя\r\n            try:\r\n                if User.find_by_login(login):\r\n                    response.set_status(409)\r\n                    return response.send()\r\n\r\n                # создание юзера в базе и выдача токена\r\n                user_data = User.create_user(login, password, first_name, sur_name, middle_name, email, phone_number, pers_photo_data)\r\n\r\n            # если ошибка в логике сервера\r\n            except Exception:\r\n                response.set_status(504)\r\n                return response.send()\r\n\r\n        # логика авторизации\r\n        if action == 'LOGIN':\r\n            # проверка пользователя\r\n            try:\r\n                user_data = User.find_by_login(login)\r\n\r\n            # если ошибка в логике сервера\r\n            except Exception:\r\n                response.set_status(504)\r\n                return response.send()\r\n\r\n            if not user_data or user_data['password'] != password:\r\n                response.set_status(417)\r\n                return response.send()\r\n\r\n        # кодируем логин и пароль\r\n        encoded_login = encrypt_decrypt(login, SECRET_KEY)\r\n        encoded_password = encrypt_decrypt(password, SECRET_KEY)\r\n\r\n        # в любом случае возвращаем токен\r\n        access_token = create_user_jwt_token(encoded_login, encoded_password)\r\n\r\n        response.set_data({\r\n            \"session_token\": access_token,\r\n            \"user_data\": user_data\r\n        })\r\n\r\n        return response.send()\r\n\r\n    # общая ошибка\r\n    except Exception:\r\n        response.set_status(400)\r\n        return response.send()\r\n\r\n\r\n@api.route('/home/', methods=['GET'])  # метод получения всех постов\r\n@jwt_required(True)\r\ndef handle_posts():\r\n    response = Response()\r\n\r\n    try:\r\n        # получаем query string параметры\r\n        limit = request.args.get('limit', default=5)\r\n        page = request.args.get('page', default=1)\r\n        order = request.args.get('orderByDate', default='desc')\r\n        search = request.args.get('search', default='')\r\n\r\n        # получаем число постов по заданному фильтру search\r\n        posts_count = len(Post.get_all_posts(search=search))\r\n\r\n        # корректные преобразования значений запроса\r\n        try:\r\n            page, limit = int(page), int(limit)\r\n        except ValueError:\r\n            page, limit = 1, 5\r\n\r\n        # если limit вне диапазона количества постов\r\n        if 1 > limit or posts_count < limit:\r\n            # то он равен либо 5, либо количеству постов, если оно меньше 5 (например если постов 4, то limit=4, а не 5)\r\n            limit = min(posts_count, 5)\r\n\r\n        # формула максимально возможной страницы с данным лимитом и кол-вом постов\r\n        try:\r\n            max_page = (posts_count - 1) // limit + 1\r\n\r\n        # если постов нет, нет и limit, но одну страницу мы отобразить должны\r\n        except ZeroDivisionError:\r\n            max_page = 1\r\n\r\n        # проверяем page на допустимый диапазон\r\n        if page < 1 or page > max_page:\r\n            page = 1\r\n\r\n        if order not in ['asc', 'desc']:\r\n            order = 'desc'\r\n\r\n        # получение постов по запросу\r\n        try:\r\n            posts = Post.get_all_posts(order, page, limit, search)\r\n\r\n            # к постам добавляем последним пунктом словарь operations со списком доступных операций\r\n            posts = [list(post) + [{}] for post in posts]\r\n\r\n            # проверка, авторизован ли пользователь и какие у него доступны операции\r\n            try:\r\n                identity = get_jwt_identity()\r\n                login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n                # модифицируем операции в зависимости от роли пользователя\r\n                for post in posts:\r\n                    # если он создатель\r\n                    if post[1] == login:\r\n                        post[-1] |= {\r\n                            'delete': f'/api/{post[0]}/delete',\r\n                            'update': f'/api/{post[0]}/update'\r\n                        }\r\n\r\n                    # если он модератор и это не пост другого модератора\r\n                    elif (User.is_moderator(login)) and (not User.is_moderator(post[1])):\r\n                        post[-1] |= {\r\n                            'delete': f'/api/{post[0]}/delete',\r\n                            'ban': f'/api/ban'  # тут должен быть эндпоинт бана\r\n                        }\r\n\r\n            except Exception as e:\r\n                print(e)\r\n\r\n            response.set_data({\r\n                'filters': {\r\n                    'orderByDate': order,\r\n                    'search': search,\r\n                },\r\n                'limit': limit,\r\n                'page': page,\r\n                'totalPosts': posts_count,\r\n                'posts': posts,\r\n            })\r\n\r\n            return response.send()\r\n\r\n        # если ошибка в логике сервера\r\n        except Exception:\r\n            response.set_status(504)\r\n            return response.send()\r\n\r\n    # общая ошибка\r\n    except:\r\n        response.set_status(400)\r\n        return response.send()\r\n\r\n\r\n@api.route('/<post_id>/', methods=['GET'])  # метод получения одного поста(с обновлением просмотров)\r\n@jwt_required(True)\r\ndef handle_post(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        Post.increment_view(post_id)\r\n        post = list(Post.get_post_by_id(post_id))\r\n        post.append({})\r\n        # проверка, авторизован ли пользователь и какие у него доступны операции\r\n        try:\r\n            identity = get_jwt_identity()\r\n            login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n            # модифицируем операции в зависимости от роли пользователя\r\n            if post[1] == login:\r\n                post[-1] |= {\r\n                    'delete': f'/api/{post[0]}/delete',\r\n                    'update': f'/api/{post[0]}/update'\r\n                }\r\n\r\n            # если он модератор и это не пост другого модератора\r\n            elif (User.is_moderator(login)) and (not User.is_moderator(post[1])):\r\n                post[-1] |= {\r\n                    'delete': f'/api/{post[0]}/delete',\r\n                    'ban': f'/api/ban'\r\n                    #### тут должен быть эндпоинт бана, ещё нужно саму функцию и всю связанную логику\r\n                }\r\n\r\n        except Exception as e:\r\n            print(e)\r\n\r\n        response.set_data({\r\n            'post': post,\r\n            # 'reaction': {'like/dislike/none'}\r\n        })\r\n        return response.send()\r\n\r\n    except Exception:\r\n        response.set_status(504)\r\n\r\n\r\n@api.route('/home/create_post', methods=['POST'])  # метод создания нового поста\r\n@jwt_required()\r\ndef create_post():\r\n    response = Response()\r\n\r\n    # получение и обработка данных\r\n    try:\r\n        identity = get_jwt_identity()\r\n        owner_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n        data = request.get_json()\r\n\r\n        title = data.get(\"title\")\r\n        content = data.get(\"content\")\r\n        tags = data.get(\"tags\")\r\n        image_data = data.get(\"image_data\")\r\n\r\n        # валидация всех полей\r\n        is_valid, validation_error = check_post_data(data)\r\n        if not is_valid:\r\n            response.set_status(417)\r\n            response.set_message(validation_error)\r\n            return response.send()\r\n\r\n        # проверка на плохие слова\r\n        if not check_bad_words(title, content, tags):\r\n            response.set_status(418)\r\n            return response.send()\r\n\r\n    # если данные некорректны\r\n    except Exception:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    # запись нового поста\r\n    try:\r\n        if image_data is not None:\r\n            header, image_data = image_data.split(\",\", 1)\r\n\r\n            # проверка иконки на наличие и валидность\r\n            if not is_image_valid(image_data) or not check_image_aspect_ratio(image_data):\r\n                response.set_status(420)\r\n                return response.send()\r\n\r\n            # сохранение иконки и возврат ее пути для записи\r\n            unique_filename = generate_uuid() + \".png\"\r\n            image_data = save_image(image_data, unique_filename)\r\n\r\n        unique_id = generate_uuid()\r\n        Post.create_post(unique_id, owner_login, title, content, tags, image_data)\r\n\r\n        return response.send()\r\n\r\n    # если ошибка в логике сервера\r\n    except Exception:\r\n        response.set_status(421)\r\n        return response.send()\r\n\r\n\r\n@api.route('/<post_id>/update/', methods=['PUT'])  # метод редактирования поста !!!\r\n@jwt_required()\r\ndef update_post(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        identity = get_jwt_identity()\r\n        owner_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n        if not Post.get_post_by_id(post_id):\r\n            response.set_status(419)\r\n            return response.send()\r\n\r\n        data = request.get_json()\r\n        title = data.get(\"title\")\r\n        content = data.get(\"content\")\r\n        tags = data.get(\"tags\")\r\n        image_data = data.get(\"image_data\")\r\n\r\n        # валидация полей\r\n        is_valid, validation_error = check_post_data(data)\r\n        if not is_valid:\r\n            response.set_status(417)\r\n            response.set_message(validation_error)\r\n            return response.send()\r\n\r\n        # проверка на плохие слова\r\n        if not check_bad_words(title, content, tags):\r\n            response.set_status(418)\r\n            return response.send()\r\n\r\n        if image_data is not None:\r\n            header, image_data = image_data.split(\",\", 1)\r\n            # проверка иконки на наличие и валидность\r\n            if not is_image_valid(image_data) or not check_image_aspect_ratio(image_data):\r\n                response.set_status(420)\r\n                return response.send()\r\n\r\n            # сохранение изображения и возврат ее пути для записи(или перезаписи, если она есть уже)\r\n            if Post.image_already(post_id):\r\n                unique_filename = Post.image_filename(post_id)\r\n                os.remove(\"sourses/userPostImages\"+unique_filename)\r\n            else:\r\n                unique_filename = generate_uuid() + \".png\"\r\n                image_data = save_image(image_data, unique_filename)\r\n\r\n    except Exception:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    # обновляем пост в базе\r\n    try:\r\n        Post.update_post(post_id, owner_login, title=title, content=content, tags=tags, imagedata=image_data)\r\n        response.set_status(205)\r\n        return response.send()\r\n\r\n    # если ошибка в логике сервера\r\n    except Exception:\r\n        response.set_status(421)\r\n        return response.send()\r\n\r\n\r\n@api.route('/<post_id>/delete/', methods=['DELETE'])  # метод удаления поста\r\n@jwt_required()\r\ndef delete_post(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        jwt_identity = get_jwt_identity()\r\n        owner_login = encrypt_decrypt(jwt_identity[\"login\"], SECRET_KEY)\r\n\r\n    except Exception:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    try:\r\n        Post.delete_post(post_id, owner_login=owner_login)\r\n        response.set_status(206)\r\n        return response.send()\r\n\r\n    # если ошибка в логике сервера\r\n    except Exception:\r\n        response.set_status(504)\r\n        return response.send()\r\n\r\n\r\n#### нужо сделать operations для комментов, для овнера и модера\r\n@api.route('<post_id>/comments', methods=['GET'])  # метод получения комментов к посту\r\n@jwt_required(True)\r\ndef handle_comments(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        all_posts = Post.get_all_posts()\r\n        posts_id = [post[0] for post in all_posts]\r\n\r\n        # если пост с таким id существует\r\n        if post_id in posts_id:\r\n\r\n            comments_count = len(Comment.get_comments_by_post(post_id))\r\n\r\n            # получаем query string параметры\r\n            limit = request.args.get('limit', default=5)\r\n            page = request.args.get('page', default=1)\r\n            order = request.args.get('orderByDate', default='desc')\r\n\r\n            # корректные преобразования значений запроса\r\n            try:\r\n                page, limit = int(page), int(limit)\r\n            except ValueError:\r\n                page, limit = 1, 5\r\n\r\n            if 1 > limit or comments_count < limit:\r\n                limit = min(comments_count, 5)\r\n\r\n            # формула максимально возможной страницы с данным лимитом и кол-вом постов\r\n            try:\r\n                max_page = (comments_count - 1) // limit + 1\r\n            # если постов нет, нет и limit, но одну страницу мы отобразить должны\r\n            except ZeroDivisionError:\r\n                max_page = 1\r\n\r\n            # проверяем page на допустимый диапазон\r\n            if page < 1 or page > max_page:\r\n                page = 1\r\n\r\n            if order not in ['asc', 'desc']:\r\n                order = 'desc'\r\n\r\n            # пытаемся получить комментарии к посту\r\n            try:\r\n                comments = Comment.get_comments_by_post(order, page, limit)\r\n\r\n                comments = [list(comment) + [{}] for comment in comments]\r\n                try:\r\n                    identity = get_jwt_identity()\r\n                    login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n                    for comment in comments:\r\n                        # если он создатель\r\n                        if comment[1] == login:\r\n                            comment[-1] |= {\r\n                                'delete': f'/api/{comment[0]}/delete',\r\n                                'update': f'/api/{comment[0]}/update'\r\n                            }\r\n\r\n                        # если он модератор и это не пост другого модератора\r\n                        elif (User.is_moderator(login)) and (not User.is_moderator(comment[1])):\r\n                            comment[-1] |= {\r\n                                'delete': f'/api/{comment[0]}/delete',\r\n                                'ban': f'/api/ban'  # тут должен быть эндпоинт бана\r\n                            }\r\n                except Exception as e:\r\n                    print(e)\r\n\r\n                response.set_data({\r\n                    'filters': {\r\n                        'orderByDate': order\r\n                    },\r\n                    'limit': limit,\r\n                    'page': page,\r\n                    'totalComments': comments_count,\r\n                    'comments': comments,\r\n                })\r\n\r\n                return response.send()\r\n\r\n            # если ошибка в логике сервера\r\n            except Exception:\r\n                response.set_status(504)\r\n                return response.send()\r\n\r\n        # ошибка \"не найдено\"\r\n        else:\r\n            response.set_status(404)\r\n            return response.send()\r\n\r\n    # общая ошибка\r\n    except Exception:\r\n        response.set_status(400)\r\n        return response.send()\r\n\r\n\r\n@api.route('/<post_id>/add_comment', methods=['POST'])  # метод создания коммента\r\n@jwt_required()\r\ndef create_comment(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        identity = get_jwt_identity()\r\n        owner_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n        # Извлечение полей из данных запроса\r\n        data = request.get_json()\r\n        content = data.get('content')\r\n\r\n        # Валидация данных комментария\r\n        is_valid, validation_error = check_comment_data(data)\r\n\r\n        if not is_valid:\r\n            response.set_status(417)\r\n            response.set_message(validation_error)\r\n            return response.send()\r\n\r\n        # Проверка на наличие неприемлемого контента с помощью проверки плохих слов\r\n        if not check_bad_words(content):\r\n            response.set_status(418)\r\n            return response.send()\r\n    except:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    try:\r\n        unique_id = generate_uuid()\r\n        # Создание комментария в базе данных\r\n        Comment.create_comment(unique_id, owner_login, post_id, content)\r\n\r\n    except Exception:\r\n        response.set_status(504)\r\n        return response.send()\r\n\r\n    response.set_status(201)\r\n    return response.send()\r\n\r\n\r\n@api.route('/<post_id>/update_comment', methods=['PUT'])  # метод редактирования коммента\r\n@jwt_required()\r\ndef update_comment(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        identity = get_jwt_identity()\r\n        owner_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n        data = request.get_json()\r\n        content = data.get(\"content\")\r\n        comment_id = data.get(\"comment_id\")\r\n\r\n        if not Post.get_post_by_id(post_id) or not Comment.get_comment_by_id(comment_id):\r\n            response.set_status(419)\r\n            return response.send()\r\n\r\n        is_valid, validation_error = check_comment_data(data)\r\n\r\n        if not is_valid:\r\n            response.set_status(417)\r\n            response.set_message(validation_error)\r\n            return response.send()\r\n\r\n        if not check_bad_words(content):\r\n            response.set_status(418)\r\n            return response.send()\r\n\r\n    except Exception:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    try:\r\n        Comment.update_comment(comment_id, owner_login, content)\r\n        response.set_status(205)\r\n        return response.send()\r\n\r\n    except Exception:\r\n        response.set_status(421)\r\n        return response.send()\r\n\r\n\r\n@api.route('/<post_id>/delete_comment', methods=['DELETE'])  # метод удаления коммента\r\n@jwt_required()\r\ndef delete_comment(post_id):\r\n    response = Response()\r\n\r\n    data = request.get_json()\r\n    comment_id = data.get(\"comment_id\")\r\n\r\n    try:\r\n        identity = get_jwt_identity()\r\n        owner_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n        if not Post.get_post_by_id(post_id) or not Comment.get_comment_by_id(comment_id):\r\n            response.set_status(419)\r\n            return response.send()\r\n\r\n    except Exception:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    try:\r\n        Comment.delete_comment(comment_id, owner_login)\r\n        response.set_status(206)\r\n        return response.send()\r\n\r\n    except Exception:\r\n        response.set_status(421)\r\n\r\n\r\n@api.route('/edit_user', methods=['PUT'])  # метод редактирования данных пользователя\r\n@jwt_required()\r\ndef edit_userprofile():\r\n    response = Response()\r\n    encoded_password, encoded_login, access_token = None, None, None  # заготовки для будущего токена\r\n\r\n    try:\r\n        identity = get_jwt_identity()\r\n        original_login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n        original_password = encrypt_decrypt(identity[\"password\"], SECRET_KEY)\r\n\r\n        # Получение данных из запроса\r\n        data = request.get_json()\r\n        login = data.get(\"login\")\r\n        password = data.get(\"password\")\r\n        first_name = data.get(\"first_name\")\r\n        middle_name = data.get(\"middle_name\")\r\n        sur_name = data.get(\"sur_name\")\r\n        email = data.get(\"email\")\r\n        phone_number = data.get(\"phone_number\")\r\n        pers_photo_data = data.get(\"pers_photo_data\")\r\n\r\n        # Валидация данных пользователя\r\n        is_valid, validation_error = check_user_data(data, 'update')\r\n        if not is_valid:\r\n            response.set_status(417)\r\n            response.set_message(validation_error)\r\n            return response.send()\r\n\r\n        # Проверка на наличие недопустимых слов в именах пользователя\r\n        if not check_bad_words(first_name, middle_name, sur_name):\r\n            response.set_status(418)\r\n            return response.send()\r\n\r\n        # Обработка данных о персональном фото\r\n        if pers_photo_data is not None:\r\n            header, pers_photo_data = pers_photo_data.split(\",\", 1)\r\n\r\n            if not is_image_valid(pers_photo_data) or not is_icon_square(pers_photo_data):\r\n                response.set_status(420)\r\n                return response.send()\r\n            unique_filename = generate_uuid() + \".png\"\r\n            pers_photo_data = save_icon(pers_photo_data, unique_filename)\r\n\r\n        # проверка, не существует ли новый логин в базе\r\n        if login:\r\n            user = User.find_by_login(login)\r\n            if user:\r\n                response.set_status(409)\r\n                return response.send()\r\n\r\n            encoded_login = encrypt_decrypt(login, SECRET_KEY)\r\n\r\n    except Exception:\r\n\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n    try:\r\n        # Обновление данных пользователя в базе данных\r\n        User.update_user(original_login, login, password, first_name, middle_name, sur_name, email, phone_number, pers_photo_data)\r\n\r\n        try:\r\n            if password:\r\n                encoded_password = encrypt_decrypt(password, SECRET_KEY)\r\n\r\n            if encoded_login and encoded_password:\r\n                access_token = create_user_jwt_token(encoded_login, encoded_password)\r\n            elif encoded_login:\r\n                access_token = create_user_jwt_token(encoded_login, original_password)\r\n            elif encoded_password:\r\n                access_token = create_user_jwt_token(original_login, encoded_password)\r\n\r\n            response.set_status(205)\r\n            if access_token:\r\n                response.set_data(({\r\n                    \"session_token\": access_token\r\n                }))\r\n            return response.send()\r\n\r\n        except:\r\n            response.set_status(405)\r\n            return response.send()\r\n\r\n    # данных не поступило\r\n    except Exception:\r\n        response.set_status(417)\r\n        return response.send()\r\n\r\n\r\n@api.route('/<post_id>/rate/', methods=['PUT'])  # метод лайков/дизлайков под постом\r\n@jwt_required()\r\ndef rate(post_id):\r\n    response = Response()\r\n\r\n    try:\r\n        identity = get_jwt_identity()\r\n        login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n        all_posts = Post.get_all_posts()\r\n        posts_id = [post[0] for post in all_posts]\r\n\r\n        # если пост с таким id существует\r\n        if post_id in posts_id:\r\n\r\n            data = request.get_json()\r\n            action = data.get('action')\r\n\r\n            try:\r\n                # перебор доступных action\r\n                if action in ['like', 'unlike']:\r\n                    is_successful, message = Post.like_post(login, post_id, action)\r\n\r\n                elif action in ['dislike', 'undislike']:\r\n                    is_successful, message = Post.dislike_post(login, post_id, action)\r\n\r\n                # неизвестное действие\r\n                else:\r\n                    response.set_status(412)\r\n                    return response.send()\r\n\r\n                if is_successful:\r\n                    # успешно\r\n                    response.set_status(200)\r\n                    return response.send()\r\n\r\n                # некорректное действие\r\n                response.set_data({\r\n                    \"error\": message\r\n                })\r\n                response.set_status(415)\r\n                return response.send()\r\n\r\n            except:\r\n                response.set_status(504)\r\n                return response.send()\r\n\r\n        # ошибка \"не найдено\"\r\n        else:\r\n            response.set_status(404)\r\n            return response.send()\r\n\r\n    # общая ошибка\r\n    except:\r\n        response.set_status(400)\r\n        return response.send()\r\n\r\n\r\n@api.route('/get_user', methods=['GET'])\r\n@jwt_required()\r\ndef get_user():\r\n    response = Response()\r\n\r\n    identity = get_jwt_identity()\r\n    login = encrypt_decrypt(identity[\"login\"], SECRET_KEY)\r\n\r\n    try:\r\n        user_data = User.get_user(login)\r\n        response.set_data({\"user_data\": user_data})\r\n        return response.send()\r\n\r\n    except Exception:\r\n        response.set_status(404)\r\n        return response.send()\r\n\r\n\r\n@api.route('/ban_ip', methods=['POST'])\r\ndef ban_ip():\r\n    response = Response()\r\n\r\n    ip_address = request.form.get('ip_address')\r\n    if ip_address:\r\n        with open(nginx_blacklist_path, 'a') as ban_list:\r\n            ban_list.write(f\"deny {ip_address};\\n\")\r\n\r\n        nginx_banned_ips.add(ip_address)\r\n        response.set_message(f\"IP {ip_address} has been banned\")\r\n        return response.send()\r\n\r\n    response.set_status(400)\r\n    response.set_message(\"Invalid IP address\")\r\n    return response.send()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/routes.py b/app/routes.py
--- a/app/routes.py	(revision dcbd1e5f177670886d1f74d315901653a4a59e7b)
+++ b/app/routes.py	(date 1721668940233)
@@ -124,9 +124,9 @@
         current_time = int(time.time())  # в секундах
 
         # проверка актуального времени капчи
-        # if captcha_created_time + TIME_CAPTCHA_LIMIT < current_time:
-        #     response.set_status(416)
-        #     return response.send()
+        if captcha_created_time + TIME_CAPTCHA_LIMIT < current_time:
+            response.set_status(416)
+            return response.send()
 
         # проверка пользовательского решения капчи
         if input_captcha != captcha_solution:
Index: run.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from app import create_app\r\n\r\napp = create_app()\r\n\r\nif __name__ == '__main__':\r\n    app.run(\"0.0.0.0\", debug=True)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run.py b/run.py
--- a/run.py	(revision dcbd1e5f177670886d1f74d315901653a4a59e7b)
+++ b/run.py	(date 1721668653235)
@@ -3,5 +3,5 @@
 app = create_app()
 
 if __name__ == '__main__':
-    app.run("0.0.0.0", debug=True)
+    app.run(host="0.0.0.0", debug=True)
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"313496f0-9e1b-4b22-820e-d983be4c79e6\" name=\"Changes\" comment=\"12th commit (pre-release)\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/routes.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/routes.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/run.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/run.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/unitTests/user-create(auth).txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/unitTests/user-create(auth).txt\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"SQL File\" />\r\n        <option value=\"Dockerfile\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Triddov&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Triddov/studposts_server&quot;,\r\n    &quot;accountId&quot;: &quot;03e9cf60-442a-47d6-b25a-6db9c7882328&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2jA9bufOTK1oPOPETUhi8YN1NQm\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.__init__.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.badwords_checker.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.banned_words_checker.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.captcha.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.check_data.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.database.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.generate_captcha.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.generate_token.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.routes.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.run.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.server_exception.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.validation_data.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.хуй.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;stepan&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/akini/PycharmProjects/PaginationTask&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;settings.qodana&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;postgresql&quot;,\r\n      &quot;redis&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"PyConsoleOptionsProvider\">\r\n    <option name=\"myPythonConsoleState\">\r\n      <console-settings module-name=\"studposts_server\" is-module-sdk=\"true\">\r\n        <option name=\"myUseModuleSdk\" value=\"true\" />\r\n        <option name=\"myModuleName\" value=\"studposts_server\" />\r\n      </console-settings>\r\n    </option>\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\\unitTests\" />\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\" />\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\\.venv\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\\sourses\" />\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\\unitTests\" />\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\\Tests\" />\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\\app\" />\r\n      <recent name=\"C:\\Users\\akini\\PycharmProjects\\studposts_server\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-PY-241.18034.82\" />\r\n        <option value=\"bundled-python-sdk-975db3bf15a3-2767605e8bc2-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.18034.82\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"313496f0-9e1b-4b22-820e-d983be4c79e6\" name=\"Changes\" comment=\"\" />\r\n      <created>1720819089322</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1720819089322</updated>\r\n      <workItem from=\"1721196682352\" duration=\"290000\" />\r\n      <workItem from=\"1721197046999\" duration=\"235000\" />\r\n      <workItem from=\"1721208720081\" duration=\"247000\" />\r\n      <workItem from=\"1721209052202\" duration=\"43000\" />\r\n      <workItem from=\"1721209511212\" duration=\"415000\" />\r\n      <workItem from=\"1721210017851\" duration=\"3025000\" />\r\n      <workItem from=\"1721213893311\" duration=\"41874000\" />\r\n      <workItem from=\"1721289312553\" duration=\"21319000\" />\r\n      <workItem from=\"1721315504160\" duration=\"22363000\" />\r\n      <workItem from=\"1721378318456\" duration=\"5994000\" />\r\n      <workItem from=\"1721404118959\" duration=\"7941000\" />\r\n      <workItem from=\"1721459740107\" duration=\"62000\" />\r\n      <workItem from=\"1721459809437\" duration=\"1967000\" />\r\n      <workItem from=\"1721462343747\" duration=\"15517000\" />\r\n      <workItem from=\"1721484542627\" duration=\"5944000\" />\r\n      <workItem from=\"1721492444114\" duration=\"11481000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"second commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720864397921</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1720864397921</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"second commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720864789115</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1720864789115</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"third commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720890853098</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1720890853098</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"4th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720950422563</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1720950422563</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"5th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721041312492</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721041312492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"6th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721066641333</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721066641333</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"first stable version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721088178388</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721088178388</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"8th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721128031725</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721128031725</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"second stable version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721173785347</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721173785347</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"second stable version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721174532240</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721174532240</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"9th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721259297469</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721259297469</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"10th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721314669365</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721314669365</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"11th commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721338708957</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721338708957</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"third stable version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721344740854</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721344740854</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"11th commit (pre-release)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721413164546</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721413164546</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"12th commit (pre-release)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721492078116</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721492078116</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\".env\" />\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.bat\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"second commit\" />\r\n    <MESSAGE value=\"third commit\" />\r\n    <MESSAGE value=\"4th commit\" />\r\n    <MESSAGE value=\"5th commit\" />\r\n    <MESSAGE value=\"6th commit\" />\r\n    <MESSAGE value=\"7th commit\" />\r\n    <MESSAGE value=\"first stable version\" />\r\n    <MESSAGE value=\"8th commit\" />\r\n    <MESSAGE value=\"barahlo2\" />\r\n    <MESSAGE value=\"second stable version\" />\r\n    <MESSAGE value=\"9th commit\" />\r\n    <MESSAGE value=\"10th commit\" />\r\n    <MESSAGE value=\"11th commit\" />\r\n    <MESSAGE value=\"third stable version\" />\r\n    <MESSAGE value=\"11th commit (pre-release)\" />\r\n    <MESSAGE value=\"12th commit (pre-release)\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"12th commit (pre-release)\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/studposts_server$generate_token.coverage\" NAME=\"generate_token Coverage Results\" MODIFIED=\"1721410314757\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/app\" />\r\n    <SUITE FILE_PATH=\"coverage/studposts_server$validation_data.coverage\" NAME=\"validation_data Coverage Results\" MODIFIED=\"1721213133023\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/app\" />\r\n    <SUITE FILE_PATH=\"coverage/studposts_server$routes.coverage\" NAME=\"routes Coverage Results\" MODIFIED=\"1721410408064\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/app\" />\r\n    <SUITE FILE_PATH=\"coverage/studposts_server$run.coverage\" NAME=\"run Coverage Results\" MODIFIED=\"1721666493924\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/studposts_server$database.coverage\" NAME=\"database Coverage Results\" MODIFIED=\"1721404436276\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/app\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision dcbd1e5f177670886d1f74d315901653a4a59e7b)
+++ b/.idea/workspace.xml	(date 1721671000272)
@@ -8,7 +8,6 @@
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/routes.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/run.py" beforeDir="false" afterPath="$PROJECT_DIR$/run.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/unitTests/user-create(auth).txt" beforeDir="false" afterPath="$PROJECT_DIR$/unitTests/user-create(auth).txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -159,6 +158,7 @@
       <workItem from="1721462343747" duration="15517000" />
       <workItem from="1721484542627" duration="5944000" />
       <workItem from="1721492444114" duration="11481000" />
+      <workItem from="1721670999401" duration="1000" />
     </task>
     <task id="LOCAL-00001" summary="second commit">
       <option name="closed" value="true" />
@@ -326,13 +326,14 @@
     <MESSAGE value="third stable version" />
     <MESSAGE value="11th commit (pre-release)" />
     <MESSAGE value="12th commit (pre-release)" />
-    <option name="LAST_COMMIT_MESSAGE" value="12th commit (pre-release)" />
+    <MESSAGE value="14th commit" />
+    <option name="LAST_COMMIT_MESSAGE" value="14th commit" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/studposts_server$generate_token.coverage" NAME="generate_token Coverage Results" MODIFIED="1721410314757" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/app" />
     <SUITE FILE_PATH="coverage/studposts_server$validation_data.coverage" NAME="validation_data Coverage Results" MODIFIED="1721213133023" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/app" />
     <SUITE FILE_PATH="coverage/studposts_server$routes.coverage" NAME="routes Coverage Results" MODIFIED="1721410408064" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/app" />
-    <SUITE FILE_PATH="coverage/studposts_server$run.coverage" NAME="run Coverage Results" MODIFIED="1721666493924" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/studposts_server$run.coverage" NAME="run Coverage Results" MODIFIED="1721668664268" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/studposts_server$database.coverage" NAME="database Coverage Results" MODIFIED="1721404436276" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/app" />
   </component>
 </project>
\ No newline at end of file
