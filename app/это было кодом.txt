# забракованный код
# тут все рауты, которые были для постов и комментов
# на них можно смотреть, пользоваться наверное смысла нет


@api.route('/post/<int:id>/', methods=['GET', 'PUT', 'DELETE'])
@jwt_required()
def handle_post(id):
    post = Post.get_post_by_id(id)

    data = request.get_json()  # ТУТ ВСЕ ХУЕВО БУДЕТ
    user_login = data.get('user_login')

    if not post:
        return jsonify({"msg": "Post not found"}), 404  # не найдено

    if request.method == 'GET':
        return jsonify(post), 200  # успешно

    if post['user_login'] != user_login:
        return jsonify({"msg": "Permission denied"}), 403  # нет прав доступа

    if request.method == 'PUT':
        data = request.get_json()
        title = data.get('title', post['title'])
        content = data.get('content', post['content'])
        tags = data.get('tags', post['tags'])
        image_data = data.get('image_data', post['imageData'])
        Post.update_post(id, title, content, tags, image_data)
        return jsonify({"msg": "Post updated successfully"}), 200  # успешно

    if request.method == 'DELETE':
        Post.delete_post(id)
        return jsonify({"msg": "Post deleted successfully"}), 204  # успешно


@api.route('/post/<int:post_id>/comments/', methods=['GET'])
def handle_comments(post_id):
    if request.method == 'GET':
        sort = request.args.get('sort', 'date')
        order = request.args.get('order', 'desc')
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 10))

        comments = Comment.get_comments_by_post(post_id, sort, order, page, limit)
        return jsonify(comments), 200  # успешно


@api.route('/post/<int:post_id>/comment/create/', methods=['POST'])
@jwt_required()
def new_comment():
    data = request.get_json()
    content = data.get('content')
    image_data = data.get('image_data')
    tags = data.get('tags')
    post_id = data.get('post_id')
    user_login = get_jwt_identity()

    comment_id = Comment.create_comment(user_login, post_id, content, image_data, tags)
    return jsonify({"msg": "Comment created successfully", "comment_id": comment_id}), 201  # успешное создание


@api.route('/post/<int:post_id>/comment/<int:id>/', methods=['PUT', 'DELETE'])
@jwt_required()
def handle_comment(id):
    data = request.get_json()  # ТУТ ВСЕ ХУЕВО БУДЕТ
    user_login = data.get('user_login')

    comment = Comment.get_comment_by_id(id)

    if not comment:
        return jsonify({"msg": "Comment not found"}), 404  # не найдено

    if comment['user_login'] != user_login:
        return jsonify(
            {"msg": "Permission denied"}), 403  # нет прав доступа

    if request.method == 'PUT':
        data = request.get_json()
        content = data.get('content')
        image_data = data.get('image_data')
        tags = data.get('tags')
        Comment.update_comment(id, content, image_data, tags)
        return jsonify({"msg": "Comment updated successfully"}), 200  # успешно

    if request.method == 'DELETE':
        Comment.delete_comment(id)
        return jsonify({"msg": "Comment deleted successfully"}), 204  # успешное удаление


@api.route('/posts/<int:post_id>/view', methods=['PUT'])
def update_view_count(post_id):
    try:
        Post.increment_view(post_id)
        return jsonify({'message': 'View count incremented successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500  # ошибка сервера


@api.route('/posts/<int:post_id>/like', methods=['PUT'])
def update_likes_count(post_id):
    try:
        Post.like_post(post_id)
        return jsonify({'message': 'Likes count incremented successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500  # ошибка сервера


@api.route('/posts/<int:post_id>/dislike', methods=['PUT'])
def update_dislikes_count(post_id):
    try:
        Post.dislike_post(post_id)
        return jsonify({'message': 'Dislikes count incremented successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500  # ошибка сервера
